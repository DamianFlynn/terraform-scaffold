---
name: "ðŸ§³ BOT Activities"

on:
  workflow_call:
  #   inputs:
  #     build_id:
  #       required: true
  #       type: number
  #  ${{ inputs.build_id }}

jobs:
  activities:
    name: BOT Greeting
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Support information
        if: contains(github.event.comment.body, '/support') # check the comment if it contains the keywords
        run: |
          echo "Debug Support - Context Information"
          echo "$GITHUB_CONTEXT"

  activity-deploy:
    name: Deploy Request
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/deploy')
    env:
      GITHUB_TOKEN: ${{ github.token }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      PLAN_STORAGE: ${{ secrets.ACF_REF_AZ_ARTIFACT_STORAGE_CONN }}
    steps:
      # Has this workflow already commented on the PR?
      - name: Find Intial Comment
        uses: peter-evans/find-comment@v2
        continue-on-error: true
        id: initial-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          comment-author: "github-actions[bot]"
          body-includes: Applying Plan

      - name: Comment on PR Configuration Planning ${{ matrix.directory }}
        if: steps.initial-comment.outputs.comment-id == ''
        id: build-example-comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            # ðŸš€ Applying Plan

      # Initial Workflow Comment Reference for Updates
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          comment-author: "github-actions[bot]"
          body-includes: Applying Plan

      - name: Attempt to download an existing Plan SHA
        uses: damianflynn/gha-azblob-download-artifact@master
        id: get-plan-sha
        with:
          connection-string: ${{ secrets.ACF_REF_AZ_ARTIFACT_STORAGE_CONN }}
          name: definition-plan_${{ github.event.repository.name }}_PR${{ github.event.issue.number }}
          path: ${{ github.workspace }}/plans

      - name: If we have an exisiting Plan get its SHA
        id: store-plan-sha
        continue-on-error: true
        if: steps.get-plan-sha.outcome == 'success'
        run: |
          lastPlanSHA=$(cat ${{ github.workspace }}/plans/tfplan.SHA )
          echo "Found: $lastPlanSHA"
          echo "::set-output name=lastPlanSHA::$lastPlanSHA"

      # Grab the Current Terraform Binaries
      - name: Setup Terraform
        if: steps.changes-since-plan.outputs.definition == ''
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.3

      # Clone the repo to the 'src' folder
      - name: Clone repository for analysis
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.store-plan-sha.outputs.lastPlanSHA }}
          path: src
          fetch-depth: 1

      # Lock Files https://stackoverflow.com/a/70930940/19578580
      - name: Restore the Terraform Lockfile from plan
        if: steps.changes-since-plan.outputs.definition == ''
        run: |
          cp plans/terraform.lock.hcl src/.terraform.lock.hcl

      - name: Update comment with Preping
        if: steps.fc.outputs.comment-id != '' && steps.init.outcome != 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: append
          body: |

            - Initializing deployment tool chain.
            - Plan Id: ${{ steps.store-plan-sha.outputs.lastPlanSHA }}

      ##
      ## STAGE 1 - Terraform Init
      ##
      # Initialize requirements for Terraform
      # https://www.terraform.io/cli/config/environment-variables#tf_cli_args-and-tf_cli_args_name
      - name: Initialize Terraform
        if: steps.changes-since-plan.outputs.definition == ''
        id: init
        continue-on-error: true
        run: |
          cd src
          terraform init -input=false -lockfile=readonly
        # terraform init -reconfigure
        # env:
        #   TF_CLI_ARGS: '-var-file="env/dev.tfvars" -backend-config="bucket=${{ secrets.STATE_BUCKET }}" -backend-config="prefix=dev"'

      # Sed is removing all the ANSI Color code messages from the error.
      - name: Reformat Failed Init
        if: steps.init.outcome != 'success' && ( steps.changes-since-plan.outputs.definition == '' )
        run: |
          echo '${{ steps.init.outputs.stderr }}' \
          | sed -E 's/\x1b\[[0-9;]*m//g' > init.txt

      - name: Output formatted init error
        if: steps.init.outcome != 'success' && ( steps.changes-since-plan.outputs.definition == '' )
        id: get-init-body
        run: |
          body="$(cat init.txt)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      - name: Update comment with Init Failure
        if: steps.fc.outputs.comment-id != '' && steps.init.outcome != 'success' && ( steps.changes-since-plan.outputs.definition == '' )
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            # Configuration Planning

            Commit Id: ${{github.event.pull_request.head.sha}}

            ## Terraform Init Failed

            ```
            ${{ steps.init.outputs.stdout }}
            ```

            Formatted:
            ```
            ${{ steps.get-init-body.outputs.body }}
            ```
          reactions: -1
          edit-mode: replace

      - name: Fail workflow due to init
        if: steps.init.outcome != 'success' && ( steps.changes-since-plan.outputs.definition == '' )
        run: |
          echo "Terraform Init Failed"
          exit 1

      ##
      ## STAGE 2 - Terraform Plan
      ##

      # Execute and Terraform Apply
      # and update the PR with the findings
      - name: Apply Terraform
        # if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd src
          terraform apply \
            -input=false \
            -no-color \
            ${{ github.workspace }}/plans/tfplan

      - name: Update comment with Apply
        if: steps.fc.outputs.comment-id != '' &&  steps.apply.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ## Terraform Apply

            Environment status:
            ```
            ${{ steps.apply.outputs.stdout }}
            ```

          edit-mode: append

      - name: Update comment with Apply Failure
        if: steps.fc.outputs.comment-id != '' &&  steps.apply.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ## Terraform Apply Failed

            ```
            ${{ steps.apply.outputs.stderr }}
            ```
          reactions: -1
          edit-mode: append

      - name: Fail workflow due to apply
        if: steps.apply.outcome != 'success'
        run: |
          echo "Terraform Apply Failed"
          exit 1

  activity-debug:
    name: Debug Context
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/debug')
    env:
      GITHUB_TOKEN: ${{ github.token }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

  activity-tfsec:
    name: Scan Request
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/scan')
    env:
      GITHUB_TOKEN: ${{ github.token }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    steps:
      - name: tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.0
        with:
          sarif_file: tfsec.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: tfsec.sarif
