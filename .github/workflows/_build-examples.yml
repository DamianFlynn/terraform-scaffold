---
name: "ðŸ§³ Build Examples"

on:
  workflow_call:
    inputs:
      examples:
        required: true
        type: string

jobs:
  build-examples:
    name: "Evaluating example: ${{ matrix.directory }}"
    runs-on: ubuntu-latest
    strategy:
      matrix: "${{ fromJson(inputs.examples) }}"
      fail-fast: false
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      # Has this workflow already commented on the PR?
      - name: Find Intial Comment
        uses: peter-evans/find-comment@v2
        id: initial-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Evaluating Example

      - name: Comment on PR Evaluating Example ${{ matrix.directory }}
        if: steps.initial-comment.outputs.comment-id == ''
        id: build-example-comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # Evaluating Example: ${{ matrix.directory }}

      # Initial Workflow Comment Reference for Updates
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Evaluating Example

      # Grab the Current Terraform Binaries
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.3

      # Clone the repo to the 'src' folder
      - name: Clone repository for analysis
        uses: actions/checkout@v3
        with:
          # ref: ${{ github.sha }}
          path: src

      - name: Update comment with Preping
        if: steps.fc.outputs.comment-id != '' && steps.init.outcome != 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |

            - Initializing and Testing example.

          edit-mode: append
          reactions: rocket

      ##
      ## STAGE 1 - Terraform Init
      ##
      # Initialize requirements for Terraform
      # https://www.terraform.io/cli/config/environment-variables#tf_cli_args-and-tf_cli_args_name
      - name: Initialize Terraform
        id: init
        continue-on-error: true
        run: |
          cd src/${{ matrix.directory }}
          terraform init -input=false
        # terraform init -reconfigure
        # env:
        #   TF_CLI_ARGS: '-var-file="env/dev.tfvars" -backend-config="bucket=${{ secrets.STATE_BUCKET }}" -backend-config="prefix=dev"'

      # Sed is removing all the ANSI Color code messages from the error.
      - name: Reformat Failed Init
        if: steps.init.outcome != 'success'
        run: |
          echo '${{ steps.init.outputs.stderr }}' \
          | sed -E 's/\x1b\[[0-9;]*m//g' > init.txt

      - name: Output formatted init error
        if: steps.init.outcome != 'success'
        id: get-init-body
        run: |
          body="$(cat init.txt)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      - name: Update comment with Init Failure
        if: steps.fc.outputs.comment-id != '' && steps.init.outcome != 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            # Evaluating Example: ${{ matrix.directory }}

            ## Terraform Init Failed

            ```
            ${{ steps.init.outputs.stdout }}
            ```

            Formatted:
            ```
            ${{ steps.get-init-body.outputs.body }}
            ```
          reactions: -1
          edit-mode: replace

      - name: Fail workflow due to init
        if: steps.init.outcome != 'success'
        run: |
          echo "Terraform Init Failed"
          exit 1

      ##
      ## STAGE 2 - Terraform Plan
      ##

      # Execute and Terraform Plan to deterime the changes
      # and update the PR with the findings
      - name: Plan Terraform
        id: plan
        if: steps.init.outcome == 'success'
        continue-on-error: true
        run: |
          cd src/${{ matrix.directory }}
          terraform plan \
            -input=false \
            -no-color \
            -out=tfplan \
          && terraform show \
            -no-color tfplan

      # Sed is taking all lines that begin with one or more spaces
      # followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Output formatted plan
        id: get-comment-body
        if: steps.plan.outcome == 'success'
        run: |
          body="$(cat plan.txt)"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"

      - name: Update comment with Plan
        if: steps.fc.outputs.comment-id != '' &&  steps.plan.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            # Evaluating Example: ${{ matrix.directory }}

            ## Terraform Plan

            ```diff
            ${{ steps.get-comment-body.outputs.body }}
            ```

          edit-mode: replace

      - name: Update comment with Failed Plan
        if: steps.fc.outputs.comment-id != '' &&  steps.plan.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            # Evaluating Example: ${{ matrix.directory }}

            ## Terraform Plan Failed

            ```
            ${{ steps.plan.outputs.stderr }}
            ```
          reactions: -1
          edit-mode: replace

      - name: Fail workflow due to plan
        if: steps.plan.outcome != 'success'
        run: |
          echo "Terraform Plan Failed"
          exit 1

      ##
      ## STAGE 3 - Terraform Apply
      ##

      # Apply the Plan
      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd src/${{ matrix.directory }}
          terraform apply \
            -input=false \
            -no-color \
            tfplan

      - name: Update comment with Apply
        if: steps.fc.outputs.comment-id != '' &&  steps.apply.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ## Terraform Apply

            Environment status:
            ```
            ${{ steps.apply.outputs.stdout }}
            ```

          edit-mode: append

      - name: Update comment with Apply Failure
        if: steps.fc.outputs.comment-id != '' &&  steps.apply.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ## Terraform Apply Failed

            ```
            ${{ steps.apply.outputs.stderr }}
            ```
          reactions: -1
          edit-mode: append

      - name: Fail workflow due to apply
        if: steps.apply.outcome != 'success'
        run: |
          echo "Terraform Apply Failed"
          exit 1

      ##
      ## STAGE 4 - Terraform Destroy
      ##

      # Clean Up
      - name: Terraform Destroy
        if: steps.apply.outcome == 'success'
        id: destroy
        continue-on-error: true
        run: |
          cd src/${{ matrix.directory }}
          terraform destroy \
            -input=false \
            -auto-approve \
            -no-color

      - name: Update comment with Destroy
        if: steps.fc.outputs.comment-id != '' &&  steps.destroy.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ## Terraform Destroy

            Environment status:
            ```
            ${{ steps.destroy.outputs.stdout }}
            ```

          edit-mode: append

      - name: Update comment with Destroy Failure
        if: steps.fc.outputs.comment-id != '' &&  steps.destroy.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: |
            ## Terraform Destroy Failed

            ```
            ${{ steps.destroy.outputs.stderr }}
            ```
          reactions: -1
          edit-mode: append

      - name: Fail workflow due to destroy
        if: steps.destroy.outcome != 'success'
        run: |
          echo "Terraform Destroy Failed"
          exit 1
